{"version":3,"sources":["context.js","componets/contacts/Contact.js","componets/contacts/Contacts.js","componets/layout/Header.js","componets/layout/TextInputGroup.js","componets/contacts/AddContact.js","componets/pages/About.js","componets/pages/NotFound.js","componets/test/Test.js","componets/contacts/EditContact.js","serviceWorker.js","index.js","App.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","async","delete","onShowClick","e","name","email","phone","className","onClick","style","cursor","bind","float","color","to","marginRight","Contacts","Fragment","key","Header","branding","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","preventDefault","newContact","post","history","push","target","About","NotFound","Test","title","body","fetch","then","response","json","EditContact","updContact","match","params","put","Boolean","window","location","hostname","ReactDOM","render","basename","process","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d12cfad.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n//context\r\nconst Context = React.createContext();\r\n//reducers\r\nconst reducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'DELETE_CONTACT':\r\n            return{ \r\n                ...state,\r\n                contacts: state.contacts.filter(contact =>\r\n                contact.id !== action.payload)\r\n            };\r\n            case 'ADD_CONTACT':\r\n            return{ \r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n            case 'UPDATE_CONTACT':\r\n            return{ \r\n                ...state,\r\n                contacts: state.contacts.map(contact => \r\n                    contact.id === action.payload.id ? (contact = action.payload) : contact)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport class Provider extends Component{\r\n    //empty state/contacts\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    };\r\n    //go get contacts\r\n    async componentDidMount(){\r\n        const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\")\r\n            this.setState({contacts: res.data});\r\n    }\r\n    render(){\r\n        return(\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>    \r\n        )\r\n    }\r\n}\r\n//return Consumer so you don't have to keep writting Context.Consumer\r\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nexport default class Contact extends Component {\r\n    //when intially showing contact don't expand\r\n    state = {\r\n        showContactInfo: false\r\n    };\r\n    //delet method\r\n    onDeleteClick = async (id, dispatch) => {\r\n        //try async axios call\r\n        try{\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n            dispatch({type: 'DELETE_CONTACT', payload: id});\r\n        } \r\n        //using fake api this is to unbreak the appication.\r\n        //use a real catch on real api\r\n        catch(e){\r\n            dispatch({type: 'DELETE_CONTACT', payload: id});  \r\n        }\r\n    }\r\n    //either show or don't show contact info\r\n    onShowClick = (e) => {\r\n        this.setState({ showContactInfo:\r\n        !this.state.showContactInfo });\r\n    };\r\n    render() {\r\n        //deconstruct the state\r\n        const {id, name, email, phone} = this.props.contact;\r\n        //T/F for showing the Contact\r\n        const { showContactInfo } = this.state;\r\n        return (\r\n            //context\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value;\r\n                    return(\r\n                            <div className=\"card card-body mb-3\">\r\n                                <h4>{name}{' '} \r\n                                    <i onClick={this.onShowClick} \r\n                                        className=\"fas fa-sort-down\" \r\n                                        style={{cursor: 'pointer' }} />\r\n                                    <i onClick = {this.onDeleteClick.bind(this, id, dispatch)}  \r\n                                        className=\"fas fa-times\" \r\n                                        style={{cursor: 'pointer', float: 'right', color: 'red'}}/>\r\n                                    <Link to={`contact/edit/${id}`}>\r\n                                        <i className=\"fas fa-pencil-alt\" \r\n                                            style={{\r\n                                                cursor: 'pointer', \r\n                                                float: 'right', \r\n                                                color: 'black',\r\n                                                marginRight: '1rem'\r\n                                            }}/> \r\n                                    </Link>\r\n                                </h4> \r\n                                {showContactInfo ? (\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Email: {email}</li>\r\n                                    <li className=\"list-group-item\">Phone: {phone}</li>\r\n                                </ul>\r\n                                ) : null }\r\n                            </div>\r\n                    )\r\n                }}\r\n            </Consumer> \r\n        )\r\n    }\r\n}\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport { Consumer } from '../../context';\r\n\r\nexport default class Contacts extends Component {\r\n    render() {\r\n        return(\r\n            <Consumer>\r\n                {value => {const{ contacts } = value;\r\n                    return(\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact</span> List\r\n                            </h1>\r\n                            {contacts.map((contact) => (\r\n                            <Contact \r\n                                key={contact.id}\r\n                                contact={contact}/>\r\n                            ))}\r\n                        </React.Fragment>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom'\r\n\r\n const Header = (props) => {\r\n     const { branding } = props;\r\n    return (\r\n        <nav className='nav navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0'>\r\n            <div className=\"container\">\r\n                <Link to=\"/\" className=\"navbar-brand\">{branding}</Link>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\"></i>Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                            <i className=\"fas fa-plus\"></i>Add\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                            <i className=\"fas fa-question\"></i>\r\n                                About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: \"Monkey Peoples\"\r\n};\r\nHeader.propTypes={\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nexport default function TextInputGroup ({label,name,value,placeholder,type,onChange,error}) \r\n{\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                type = {type}\r\n                name = {name}\r\n                className = {classnames('form-control form-control-lg', {'is-invalid': error})}\r\n                placeholder = {placeholder}\r\n                value = {value}\r\n                onChange = {onChange}\r\n                />\r\n                {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTextInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string.isRequired\r\n}\r\n\r\nTextInputGroup.defaultProps = {\r\n    type: 'text'\r\n}\r\n","import React, { Component } from 'react';\r\nimport {Consumer} from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nexport default class AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        const {name, email, phone} = this.state;\r\n        //check for errors\r\n        if(name === ''){\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n        if(email === ''){\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n        if(phone === ''){\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return; \r\n        }\r\n        const newContact = {\r\n            name,\r\n            email,\r\n            phone\r\n        };\r\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact);\r\n        dispatch({ type: 'ADD_CONTACT',payload: res.data });\r\n\r\n        //clear the state\r\n        this.setState({\r\n            name:'',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        })\r\n        this.props.history.push('/');\r\n    };\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value})\r\n\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n        return (\r\n                <Consumer>\r\n                    {value => {\r\n                        const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card mb-3\">\r\n                        <div className=\"card-header\">\r\n                            Add Contact\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                <TextInputGroup\r\n                                    label = \"Name\"\r\n                                    name = \"name\"\r\n                                    placeholder = \"Enter Name...\"\r\n                                    type = \"text\"\r\n                                    value ={name}\r\n                                    onChange = {this.onChange}\r\n                                    error = {errors.name}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label = \"Email\"\r\n                                    name = \"email\"\r\n                                    placeholder = 'Enter Email...'\r\n                                    value = {email}\r\n                                    type = \"email\"\r\n                                    onChange = {this.onChange}\r\n                                    error = {errors.email}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label = \"Phone\"\r\n                                    name = \"phone\"\r\n                                    placeholder = 'Enter Phone...'\r\n                                    value = {phone}\r\n                                    type = \"text\"\r\n                                    onChange = {this.onChange}\r\n                                    error = {errors.phone}\r\n                                />\r\n                                \r\n                                <input \r\n                                    type=\"submit\" \r\n                                    value=\"Add Contact\" \r\n                                    className=\"btn btn-block btn-light\"/>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Monkey Contacts</h1>\r\n            <p className=\"lead\">Simple app to manage.</p>\r\n            <p className=\"text seconary\">Version 1.0.0</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">\r\n                404 Page Not Found\r\n            </h1>\r\n            <p className=\"lead\">Sorry, that page does not exist.</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Test extends Component {\r\n    state = {\r\n        title: '',\r\n        body: ''\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/todos/1')\r\n            .then(response => response.json())\r\n            .then(data => \r\n                this.setState({\r\n                    title: data.title,\r\n                    body: data.body\r\n                })\r\n            )\r\n    }\r\n    \r\n    render() {\r\n            const {title, body} = this.state;\r\n        return (\r\n            <div>\r\n               <h1 className=\"display-4\">\r\n                   {title}</h1>\r\n                   <p>{body}</p> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {Consumer} from '../../context';\r\nimport TextInputGroup from '../layout/TextInputGroup';\r\nimport axios from 'axios';\r\n\r\nexport default class EditContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n    async componentDidMount(){\r\n        const {id} = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n        const contact = res.data;\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone\r\n        });\r\n    }\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        //deconstruct state so I can just use the property names\r\n        const {name, email, phone} = this.state;\r\n        //check for errors\r\n        if(name === ''){\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n        if(email === ''){\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n        if(phone === ''){\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return; \r\n        }\r\n        const updContact ={\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const {id} = this.props.match.params;\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\r\n        dispatch({type: 'UPDATE_CONTACT', payload: res.data});\r\n\r\n        //clear the state\r\n        this.setState({\r\n            name:'',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        })\r\n        this.props.history.push('/');\r\n    };\r\n    //this is to allow for changes. the inputs are locked without this.\r\n    onChange = (e) => this.setState({[e.target.name]: e.target.value})\r\n\r\n\r\n    render() {\r\n        //deconstructed state to properties\r\n        const {name, email, phone, errors} = this.state;\r\n        return (\r\n                <Consumer>\r\n                    {value => {\r\n                        const { dispatch } = value;\r\n                    return(\r\n                        <div className=\"card mb-3\">\r\n                        <div className=\"card-header\">\r\n                            Edit Contact\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                <TextInputGroup\r\n                                    label = \"Name\"\r\n                                    name = \"name\"\r\n                                    placeholder = \"Enter Name...\"\r\n                                    type = \"text\"\r\n                                    value ={name}\r\n                                    onChange = {this.onChange}\r\n                                    error = {errors.name}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label = \"Email\"\r\n                                    name = \"email\"\r\n                                    placeholder = 'Enter Email...'\r\n                                    value = {email}\r\n                                    type = \"email\"\r\n                                    onChange = {this.onChange}\r\n                                    error = {errors.email}\r\n                                />\r\n                                <TextInputGroup\r\n                                    label = \"Phone\"\r\n                                    name = \"phone\"\r\n                                    placeholder = 'Enter Phone...'\r\n                                    value = {phone}\r\n                                    type = \"text\"\r\n                                    onChange = {this.onChange}\r\n                                    error = {errors.phone}\r\n                                />\r\n                                <input \r\n                                    type=\"submit\" \r\n                                    value=\"Update Contact\" \r\n                                    className=\"btn btn-block btn-light\"/>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport Contacts from './componets/contacts/Contacts'\nimport Header from './componets/layout/Header'\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Provider } from './context';\nimport AddContact from './componets/contacts/AddContact';\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport About from './componets/pages/About';\nimport NotFound from './componets/pages/NotFound';\nimport Test from './componets/test/Test'\nimport EditContact from './componets/contacts/EditContact';\nexport default function App() {\n  return (\n    <Provider>\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Header branding=\"Monkey Man Manager\" />\n            <div className=\"contanier\">\n              <Switch>\n                <Route exact path=\"/\" component = {Contacts} />\n                <Route exact path=\"/about\" component = {About} />\n                <Route exact path=\"/contact/add\" component = {AddContact} />\n                <Route exact path=\"/contact/edit/:id\" component = {EditContact} />\n                <Route exact path=\"/test\" component = {Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </header>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n \n"],"sourceRoot":""}